import 'dart:io';
import 'dart:typed_data';

import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:http/http.dart' as http;
import 'dart:html' as html;

Future<void> generateAndDownloadInvoice({
  required String customerName,
  required String customerId,
  required String customerAddress,
  required String orderId,
  required List<Map<String, dynamic>> products,
  required double total,
}) async {
  // Create a new PDF document
  final pdf = pw.Document();

  // Add page to the PDF
  pdf.addPage(
    pw.Page(
      build: (pw.Context context) {
        return pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            // Company Name and Address
            pw.Text('KhanSons Textile LTD',
                style: const pw.TextStyle(fontSize: 20)),
            pw.Text('BISIC, Barisal'),
            pw.Text('Mobile: 01737388383'),
            pw.Text('Fax:, +88626227'),
            pw.Text('Email: khansons@demo.com'),
            pw.Text('Website: khansons.org'),

            // Customer Information
            pw.SizedBox(height: 20),
            pw.Text('Customer Information',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.Text('-------------------------'),
            pw.Text('Name: $customerName'),
            pw.Text('ID: $customerId'),
            pw.Text('Address: $customerAddress'),

            // Order Information
            pw.SizedBox(height: 20),
            pw.Text('Order Information',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.Text('-------------------------'),
            pw.Text('Order ID: $orderId'),
            pw.Text(
                'Invoice Generated: ${DateFormat('h:mm a, d MMM. yyyy').format(DateTime.now())}'),

            // Product Details Table
            pw.SizedBox(height: 20),
            pw.Text('Product Details',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.Table.fromTextArray(
              cellAlignment: pw.Alignment.center,
              border: pw.TableBorder.all(),
              headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
              headers: ['Product ID', 'Name', 'Quantity', 'Price', 'Total'],
              data: products.map((product) {
                final quantity = product['quantity'] ??
                    0; // Provide default value for quantity if it's null
                final price = product['price'] ??
                    0; // Provide default value for price if it's null
                final total = quantity * price; // Calculate total
                return [
                  product['id'].toString(),
                  product['name'].toString(),
                  quantity.toString(),
                  price.toString(),
                  total.toString(),
                ];
              }).toList(),
            ),

            // Total
            pw.SizedBox(height: 20),
            pw.Text('Total: BDT $total',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.SizedBox(height: 70),
            pw.Text('Served by: System'),

            pw.SizedBox(height: 30),
            pw.Text(
                'This invoice is generated by system and no need to signature manually. All right is reserved by KhanSons Textile LTD.',
                style: const pw.TextStyle(fontSize: 8)),
          ],
        );
      },
    ),
  );

  // Save PDF as bytes
  final Uint8List pdfBytes = await pdf.save();

  // Convert PDF bytes to base64 string

  // Convert PDF bytes to Blob
  final blob = html.Blob([pdfBytes]);

  // Create download link
  final url = html.Url.createObjectUrlFromBlob(blob);
  final anchor = html.AnchorElement(href: url)
    ..setAttribute("download", "invoice.pdf")
    ..click();

  // Cleanup
  html.Url.revokeObjectUrl(url);
}
